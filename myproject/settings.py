"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
import os
from dotenv import load_dotenv

load_dotenv()

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'django-insecure-x6r&=8w9%$#0#4kbmi%4+4i13kzwnh_o8#-9s9r36p^z+^s0g&')

# SECURITY WARNING: don't run with debug turned on in production!
# TEMPORARILY enable DEBUG for Railway to see error details
if os.getenv('RAILWAY_ENVIRONMENT'):
    DEBUG = True  # TEMPORARY: Enable to see errors in production
    print("üö® DEBUG=True enabled for Railway error diagnosis")
else:
    DEBUG = True   # Development can have DEBUG=True

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', 'localhost,127.0.0.1,capstone-2complaint-management-system-production.up.railway.app').split(',') if os.getenv('ALLOWED_HOSTS') else ['localhost', '127.0.0.1', 'capstone-2complaint-management-system-production.up.railway.app']

# CSRF Trusted Origins for Railway
CSRF_TRUSTED_ORIGINS = [
    'https://capstone-2complaint-management-system-production.up.railway.app',
    'http://localhost:8000',
    'http://127.0.0.1:8000',
]

# CORS Configuration for API requests - TEMPORARILY DISABLED
# CORS_ALLOWED_ORIGINS = [
#     'https://capstone-2complaint-management-system-production.up.railway.app',
#     'http://localhost:8000',
#     'http://127.0.0.1:8000',
# ]
# 
# CORS_ALLOW_CREDENTIALS = True
# CORS_ALLOW_ALL_ORIGINS = False
# 
# # Additional CORS settings for better compatibility
# CORS_ALLOWED_HEADERS = [
#     'accept',
#     'accept-encoding',
#     'authorization',
#     'content-type',
#     'dnt',
#     'origin',
#     'user-agent',
#     'x-csrftoken',
#     'x-requested-with',
# ]
# 
# CORS_ALLOW_METHODS = [
#     'DELETE',
#     'GET',
#     'OPTIONS',
#     'PATCH',
#     'POST',
#     'PUT',
# ]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'corsheaders',  # Temporarily disabled - causing import error
    'myapp',
]

MIDDLEWARE = [
    # 'corsheaders.middleware.CorsMiddleware',  # Temporarily disabled - causing import error
    'django.middleware.security.SecurityMiddleware',
]

# Add WhiteNoise only in production (Railway environment)
if os.getenv('RAILWAY_ENVIRONMENT'):
    MIDDLEWARE.insert(-1, 'whitenoise.middleware.WhiteNoiseMiddleware')  # Insert before last

MIDDLEWARE.extend([
    'myapp.middleware.RoleBasedAuthMiddleware',  # Custom auth middleware
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
])

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Database Configuration - Use Railway PostgreSQL in production, Supabase for development
try:
    import dj_database_url
    HAS_DJ_DATABASE_URL = True
except ImportError:
    HAS_DJ_DATABASE_URL = False
    print("‚ö†Ô∏è dj-database-url not available, using manual database configuration")

if os.getenv('RAILWAY_ENVIRONMENT') or os.getenv('DATABASE_URL') or os.getenv('PGDATABASE'):
    # Production: Use Railway PostgreSQL
    print("üöÄ Using Railway PostgreSQL database for production.")
    
    # Try DATABASE_URL first (Railway's preferred method)
    database_url = os.getenv('DATABASE_URL')
    if database_url and HAS_DJ_DATABASE_URL:
        print(f"üîç Using DATABASE_URL connection")
        DATABASES = {
            'default': dj_database_url.config(
                default=database_url,
                conn_max_age=600,
                conn_health_checks=True,
            )
        }
    elif database_url and not HAS_DJ_DATABASE_URL:
        print(f"‚ö†Ô∏è DATABASE_URL found but dj-database-url not available, using manual parsing")
        # Manual DATABASE_URL parsing as fallback
        import urllib.parse as urlparse
        url = urlparse.urlparse(database_url)
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': url.path[1:],
                'USER': url.username,
                'PASSWORD': url.password,
                'HOST': url.hostname,
                'PORT': url.port or 5432,
                'OPTIONS': {
                    'connect_timeout': 60,
                    'sslmode': 'require',
                },
            }
        }
    else:
        # Fallback to individual environment variables
        print(f"üîç DB Config: HOST={os.getenv('PGHOST')}, NAME={os.getenv('PGDATABASE')}, USER={os.getenv('PGUSER')}, PORT={os.getenv('PGPORT', '5432')}")
        
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': os.getenv('PGDATABASE'),
                'USER': os.getenv('PGUSER'),
                'PASSWORD': os.getenv('PGPASSWORD'),
                'HOST': os.getenv('PGHOST'),
                'PORT': os.getenv('PGPORT', '5432'),
                'OPTIONS': {
                    'connect_timeout': 60,
                    'sslmode': 'require',
                },
            }
        }
else:
    # Development OR Railway fallback: Use Supabase PostgreSQL database
    print("üöÄ Using Supabase PostgreSQL database (development or Railway fallback).")
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': 'postgres',
            'USER': 'postgres.dfcaiybfnrhyitofdxug',
            'PASSWORD': 'Lotusnotes216641021',  # Your Supabase database password
            'HOST': 'aws-0-ap-southeast-1.pooler.supabase.com',
            'PORT': '5432',
            'OPTIONS': {
                'sslmode': 'require',
                'connect_timeout': 60,
            },
        }
    }
    print("‚ö†Ô∏è  FALLBACK: If this is Railway, please add PostgreSQL service in Railway dashboard")



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = "Asia/Manila"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / 'staticfiles'  # For production
STATICFILES_DIRS = [BASE_DIR / "myapp" / "static"]

# Static files storage for production (only when using WhiteNoise)
if os.getenv('RAILWAY_ENVIRONMENT'):
    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Comprehensive logging for Railway debugging
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': False,
        },
        'myapp': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# =========================
# File Upload Settings
# =========================
# Increase limits for file uploads (especially for base64 image data)
DATA_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
FILE_UPLOAD_MAX_MEMORY_SIZE = 10 * 1024 * 1024  # 10MB
DATA_UPLOAD_MAX_NUMBER_FIELDS = 1000

# =========================
# Supabase Configuration
# =========================
SUPABASE_URL = os.getenv('SUPABASE_URL', "https://dfcaiybfnrhyitofdxug.supabase.co")
SUPABASE_KEY = os.getenv('SUPABASE_KEY', "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRmY2FpeWJmbnJoeWl0b2ZkeHVnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDg4NjIzNzgsImV4cCI6MjA2NDQzODM3OH0.DfOwFq0X1PqWhhaTS2sxKl1sL4WPO0uR-p5qLFvjy6E")

# =========================
# Email Configuration - Gmail SMTP
# =========================
# Use hardcoded Gmail credentials for both development and production
# This ensures consistent email functionality across environments
EMAIL_HOST_USER = "complaintmanagementsystem5@gmail.com"  # ‚úÖ System Gmail address
EMAIL_HOST_PASSWORD = "ocjr swyw mnrb pwts"  # ‚úÖ System 16-character app password

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = "smtp.gmail.com"
EMAIL_PORT = 587
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# Twilio Configuration (Optional)
TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID", "")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN", "")
TWILIO_FROM = os.getenv("TWILIO_FROM", "")   # e.g. +15005550006

print("üìß Email mode: SMTP (Gmail) - REAL EMAIL SENDING ENABLED")
print(f"‚úÖ Gmail configuration is properly set up with: {EMAIL_HOST_USER}")

# =========================
# Security Settings for Production
# =========================
if not DEBUG:
    # SECURE_SSL_REDIRECT = True  # Commented out to prevent redirect loops on Railway
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
